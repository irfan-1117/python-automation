name: Build and Deploy Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      version:
        description: 'Version of the image'
        required: true
        default: 'latest'
        type: string

env:
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: 'techiirfan'

permissions:
  contents: read
  packages: write  # Required for pushing Docker images

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10 and Install Dependencies
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          [ -f src/requirements.txt ] && pip install -r src/requirements.txt

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@latest
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
        with:
          args:
            -Dsonar.projectKey=irfan-1117_Python-automation
            -Dsonar.organization=irfan-1117
          projectBaseDir: ./src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          IMAGE_TAG=${{ github.event.inputs.version }}-${TIMESTAMP}-${{ github.sha }}
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG src
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@latest
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull Docker image from Amazon ECR
        run: |
          IMAGE_TAG=${{ github.event.inputs.version }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

